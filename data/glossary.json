{
	"id": "glossary",
	"title": "Development Glossary",
	"subtitle": "Essential terms and concepts for web development",
	"type": "terms",
	"data": [
		{
			"term": "API",
			"definition": "Application Programming Interface - a set of protocols, routines, and tools for building software applications. It specifies how software components should interact.",
			"flags": ["Backend", "Integration"],
			"examples": [
				{
					"text": "Basic fetch API call in JavaScript",
					"code": "fetch('https://api.example.com/data')\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error('Error:', error));"
				},
				{
					"text": "API call with POST method",
					"code": "fetch('https://api.example.com/users', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    name: 'John Doe',\n    email: 'john@example.com'\n  })\n});"
				}
			]
		},
		{
			"term": "Async/Await",
			"definition": "A syntax that makes it easier to work with promises in JavaScript. It allows you to write asynchronous code that looks and behaves more like synchronous code.",
			"flags": ["JavaScript", "ES6+"],
			"examples": [
				{
					"text": "Basic async/await function",
					"code": "async function fetchUserData(userId) {\n  try {\n    const response = await fetch(`/api/users/${userId}`);\n    const userData = await response.json();\n    return userData;\n  } catch (error) {\n    console.error('Failed to fetch user data:', error);\n    throw error;\n  }\n}"
				},
				{
					"text": "Multiple async operations",
					"code": "async function loadDashboardData() {\n  const [users, posts, comments] = await Promise.all([\n    fetch('/api/users').then(r => r.json()),\n    fetch('/api/posts').then(r => r.json()),\n    fetch('/api/comments').then(r => r.json())\n  ]);\n  \n  return { users, posts, comments };\n}"
				}
			]
		},
		{
			"term": "DOM",
			"definition": "Document Object Model - a programming interface for web documents. It represents the page so that programs can change the document structure, style, and content.",
			"flags": ["Frontend", "JavaScript", "Browser"],
			"examples": [
				{
					"text": "Selecting and modifying DOM elements",
					"code": "// Select element by ID\nconst button = document.getElementById('myButton');\n\n// Add event listener\nbutton.addEventListener('click', function() {\n  // Change text content\n  this.textContent = 'Clicked!';\n  \n  // Add CSS class\n  this.classList.add('active');\n});"
				},
				{
					"text": "Creating and appending new elements",
					"code": "// Create new element\nconst newDiv = document.createElement('div');\nnewDiv.className = 'message';\nnewDiv.textContent = 'Hello, World!';\n\n// Append to existing element\nconst container = document.querySelector('.container');\ncontainer.appendChild(newDiv);"
				}
			]
		},
		{
			"term": "Flexbox",
			"definition": "CSS Flexible Box Layout - a layout method that provides an efficient way to arrange, distribute, and align items in a container, even when their size is unknown or dynamic.",
			"flags": ["CSS", "Layout"],
			"examples": [
				{
					"text": "Basic flexbox container",
					"code": ".container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n}\n\n.item {\n  flex: 1;\n  padding: 1rem;\n  margin: 0.5rem;\n  background: #f0f0f0;\n}"
				},
				{
					"text": "Responsive flex layout",
					"code": ".flex-container {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 1rem;\n}\n\n.flex-item {\n  flex: 1 1 300px; /* grow, shrink, basis */\n  min-width: 0;\n}\n\n@media (max-width: 768px) {\n  .flex-container {\n    flex-direction: column;\n  }\n}"
				}
			]
		},
		{
			"term": "JSON",
			"definition": "JavaScript Object Notation - a lightweight data interchange format that is easy for humans to read and write, and easy for machines to parse and generate.",
			"flags": ["Data Format", "API"],
			"examples": [
				{
					"text": "Basic JSON structure",
					"code": "{\n  \"name\": \"John Doe\",\n  \"age\": 30,\n  \"isActive\": true,\n  \"hobbies\": [\"reading\", \"coding\", \"gaming\"],\n  \"address\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"New York\",\n    \"zipCode\": \"10001\"\n  }\n}"
				},
				{
					"text": "Parsing and stringifying JSON in JavaScript",
					"code": "// Parse JSON string to object\nconst jsonString = '{\"name\": \"Alice\", \"age\": 25}';\nconst userObject = JSON.parse(jsonString);\n\n// Convert object to JSON string\nconst user = { name: \"Bob\", age: 35 };\nconst jsonOutput = JSON.stringify(user, null, 2);\nconsole.log(jsonOutput);"
				}
			]
		}
	]
}
